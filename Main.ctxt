#BlueJ class context
comment0.target=Main
comment0.text=\n\ Main\ class.\ Creates\ hotel\ object\ and\ has\ the\ console\ app.\n\n\ @author\ Dale\ Berg,\ Nick\ Coyle,\ Megan\ Laine,\ Steven\ Liu\n\ @version\ 1/29/2019\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment10.params=
comment10.target=void\ reservationStatusMenu()
comment10.text=\n\ Menu\ to\ view\ information\ about\ the\ status\ of\ a\ reservation.\ \n\ Is\ it\ checked\ in,\ checked\ out,\ or\ canceled?\n
comment11.params=
comment11.target=void\ guestMenu()
comment11.text=\ \n\ Menu\ to\ see\ an\ existing\ reservation's\ guest\ information.\n
comment12.params=
comment12.target=void\ invoiceMenu()
comment12.text=\n\ Menu\ to\ search\ for\ an\ invoice\ and\ view\ the\ information\ in\ it.\n
comment13.params=
comment13.target=void\ availableRoomsMenu()
comment13.text=\n\ Menu\ to\ see\ all\ available\ rooms.\n
comment14.params=
comment14.target=void\ reportMenu()
comment14.text=\n\ Menu\ to\ display\ a\ report\ for\ internal\ hotel\ use.\n\ check\ hotel\ occupancy\ (how\ many\ guests\ are\ currently\ in\ hotel)\n\ check\ how\ many\ rooms\ are\ occupied\n\ check\ how\ many\ checkouts\ have\ occured\n\ check\ how\ many\ cancellations\ for\ occured\n\ check\ total\ sales\ and\ total\ amountDue\n
comment15.params=
comment15.target=void\ helpMenu()
comment15.text=\n\ Menu\ to\ display\ information\ on\ how\ to\ use\ this\ program.\n
comment16.params=partySize\ priceRange\ rooms
comment16.target=java.util.ArrayList\ roomOptionsTrimmer(int,\ int,\ java.util.ArrayList)
comment16.text=\n\ Returns\ an\ edited/modified\ ArrayList\ of\ Rooms\ that\ match\ user\ criteria.\n\n\ @param\ partySize\ (int)\ number\ of\ people\ in\ the\ group\n\ @param\ priceRange\ (int)\ a\ price\ point\n\ @param\ rooms\ (ArrayList<Room>)\ an\ array\ list\ of\ rooms\n\ @return\ returnList\ (ArrayList<Room>)\ an\ array\ list\ of\ rooms\ matching\ the\ criteria.\n
comment2.params=s
comment2.target=boolean\ isInt(java.lang.String)
comment2.text=\ \n\ Returns\ true\ if\ input\ from\ the\ keyboard\ is\ an\ integer.\n\ \n\ @param\ s\ (String)\ keyboard\ input\n\ @return\ true\ if\ input\ is\ an\ integer\n
comment3.params=lowest
comment3.target=int\ getUserInputInt(int)
comment3.text=\n\ Method\ getUserInputInt\ 1/2\:\ Prompts\ the\ user\ to\ enter\ an\ int\ greater\ than\ the\ \n\ lowest\ value\ allowed.\n\ \n\ @param\ lowest\ (int)\ user\ input\n\ @return\ Integer.parseInt(selection)\n
comment4.params=lowest\ highest
comment4.target=int\ getUserInputInt(int,\ int)
comment4.text=\n\ Method\ getUserInputInt\ 2/2\:\ Prompts\ the\ user\ to\ enter\ an\ int\ greater\ than\ the\ \n\ lowest\ value\ allowed.\n\ \n\ @param\ lowest\ (int)\ user\ input\n\ @param\ highest\ (int)\ user\ input\n\ @return\ Integer.parseInt(selection)\n
comment5.params=
comment5.target=void\ returnToMainMenuPrompt()
comment5.text=\n\ Prompts\ the\ user\ to\ get\ back\ to\ the\ main\ menu\ by\ pressing\ 0.\ \n\ This\ is\ going\ to\ be\ used\ anytime\ a\ menu\ gets\ to\ a\ dead\ end,\ \n\ such\ as\ when\ a\ task\ is\ complete\ or\ there\ is\ nothing\ else\ to\ do\ in\ that\ menu.\n
comment6.params=
comment6.target=Reservation\ getReservationByLastName()
comment6.text=\n\ Looks\ up\ all\ reservations\ under\ a\ last\ name\ and\ finds\ the\ right\ one.\ \n\ Used\ a\ couple\ times\ by\ the\ menus.\ (For\ ex\:\ menu(3))\n\ \n\ @return\ reservation\ (Reservation)\ a\ reservation\ object\ matched\ by\ last\ name\n
comment7.params=
comment7.target=void\ mainMenu()
comment7.text=\n\ Main\ Menu\ to\ show\ main\ options.\n
comment8.params=
comment8.target=void\ makeReservationMenu()
comment8.text=\n\ Menu\ to\ create\ a\ new\ reservation.\n
comment9.params=
comment9.target=void\ changeReservationMenu()
comment9.text=\n\ Menu\ to\ allow\ changes\ to\ some\ data\ in\ a\ reservation.\n\ \n\ @throw\ FileNotFoundException\ if\ file\ of\ prior\ reservations\ is\ not\ found\n
numComments=17
