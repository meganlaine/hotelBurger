#BlueJ class context
comment0.target=Reservation
comment0.text=\n\ Reservation\ class\ models\ a\ reservation\ in\ a\ hotel.\ A\ reservation\ is\ a\ guarantee\ to\ a\ guest\ that\ they\ will\ have\ a\ room\ set\ aside\ \n\ for\ them\ during\ a\ specified\ range\ of\ dates.\ When\ they\ come\ to\ the\ hotel,\ they\ can\ checkin\ using\ that\ reservation.\ Then,\ they\ \n\ get\ the\ room\ key\ and\ can\ stay\ in\ the\ hotel\ for\ as\ many\ nights\ as\ they\ agreed\ to\ in\ the\ reservation.\ Modifying\ a\ reservation\ means\n\ the\ guest\ can\ cancel\ the\ reservation,\ change\ any\ parameters\ about\ it,\ or\ checkout.\n\ \n\ This\ class\ allows\ creation\ of\ a\ Reservation\ object,\ modification\ of\ a\ Reservation\ object\n\ (you\ can\ change\ its\ status\ from\ WAITING,\ IN,\ OUT,\ or\ CANCELED).\n\ Allows\ access\ to\ see\ information\ about\ the\ Reservation\ state,\ and\ invoice-like\n\ information.\n\ The\ best\ way\ to\ access\ objects\ of\ Type\ Reservation\ is\ thru\ its\ unique\ ID.\n\ NOTE\:\ you\ can't\ change\ a\ Guest\ on\ the\ reservation\ at\ this\ moment.\ The\ logic\ \n\ behind\ that\ is\ you\ would\ cancel\ the\ reservation\ and\ create\ a\ new\ one\ for\ a\ new\ *\ guest.\ (of\ course\ the\ goodness\ of\ this\ is\ debatable)\n\n\ @author\ Dale\ Berg,\ Nick\ Coyle,\ Megan\ Laine,\ Steven\ Liu\n\ @version\ 01/17/2019\n
comment1.params=r\ g\ status
comment1.target=Reservation(Room,\ Guest,\ Status)
comment1.text=\n\ Constructor\ for\ Reservation\ object\:\ it\ assigns\ a\ Room\ and\ a\ Guest\ object\n\ to\ the\ reservation.\ It\ also\ assigns\ an\ ID\ number\ to\ the\ Reservation\n\ \n\ @param\ r\ (Room)\ the\ Room\ listed\ on\ the\ reservation\n\ @param\ g\ (Guest)\ the\ Guest\ listed\ on\ the\ reservation\n\ @param\ status\ (Status)\ if\ WAITING\ or\ IN\ (when\ constructing\ a\ Reservation\ it\ doesn't\ make\ sense\ to\ have\ a\ Reservation\ that\ is\ already\ CANCELED\ or\ CHECKED\ OUT)\n
comment10.params=other
comment10.target=void\ changeRoom(Room)
comment10.text=\n\ Changes\ the\ Reservation's\ room\ from\ this\ to\ other\ by\ calling\ \n\ the\ pre-existing\ method\ "setRoom(Room\ r)";\n\ Frees\ this\ room\ up\ before\ the\ change.\n\ \n\ @param\ other\ (Room)\ the\ room\ to\ be\ placed\ on\ the\ Reservation.\n\ @throw\ IllegalArgumentException\ if\ the\ room\ is\ not\ available.\n
comment11.params=
comment11.target=java.lang.String\ payBill()
comment11.text=\n\ Sets\ the\ Reservation's\ paymentDue\ field\ to\ 0.0;\ returns\ a\ string\ confirming\ payment.\n\ Assume\ that\ payment\ is\ made\ in\ 1\ lump\ sum.\n\ Assume\ that\ payment\ can\ be\ made\ at\ any\ time\ of\ the\ reservation\ process.\n
comment12.params=
comment12.target=int\ countInstances()
comment12.text=\n\ Static\ method;\ Returns\ how\ many\ instances\ of\ Class\ Reservations\ have\ been\ \n\ made.\n\n\ @return\ counter\ (int)\ representing\ the\ \#\ of\ Reservation\ objects\ made.\n
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\n\ Returns\ a\ String\ with\ information\ about\ this\ Reservation\ instance.\n\ Shows\ all\ aspects\ about\ the\ reservation\:\ \n\ Guest\ info,\ room\ info,\ reservation\ status,\ paymentDue\ info.\n\n\ @return\ (String)\ representing\ information\ about\ the\ Reservation.\n
comment2.params=
comment2.target=int\ getReservationID()
comment2.text=\n\ Returns\ an\ int\ representing\ the\ Reservation\ object's\ id\ number.\n\ \n\ @return\ (int)\ the\ Reservation\ object's\ id\ number.\n
comment3.params=
comment3.target=double\ getPaymentDue()
comment3.text=\n\ Returns\ a\ string\ that\ represents\ the\ charges\ for\ the\ room\ based\ on\ the\n\ Room\ object\ on\ the\ reservation.\ Takes\ into\ account\ the\ guest's\ discounts\n\ \n\ @return\ double\ representing\ nightly\ price\ of\ Room\n
comment4.params=
comment4.target=Status\ getStatus()
comment4.text=\n\ Returns\ the\ status\ of\ the\ Reservation\ in\ string\ format.\n\ \n\ @return\ (String)\ the\ reservation\ status.\n
comment5.params=g
comment5.target=void\ setGuest(Guest)
comment5.text=\n\ sets\ the\ guest\ object.\ at\ the\ moment\ doesnt\ have\ any\ safety\ measures.\n\n\ @param\ g\ (Guest)\ the\ guest\ to\ assign\ to\ this\ Reservation\ object\n
comment6.params=amount
comment6.target=void\ setPaymentDue(double)
comment6.text=\n\ Mutator\ being\ used\ to\ set\ paymentDue\ to\ 0.0\ if\ the\ reservation\ gets\ cancelled.\n
comment7.params=
comment7.target=void\ setPaymentDue()
comment7.text=\n\ Calculates\ and\ sets\ what\ payment\ is\ due\ based\ on\ this\ Reservation's\n\ Room\ type\ and\ Guest\ discounts.\n\ Assumptions\:\ govt\ \=\ 9%,\ mil\ \=\ 7%,\ member\ \=\ 5%;\n\ highest\ rate\ only\ is\ applied.\n
comment8.params=s
comment8.target=void\ setStatus(Status)
comment8.text=\n\ Sets\ the\ status\ of\ the\ Reservation.\ \n\ As\ a\ reminder,\ a\ status\ can\ be\:\ (IN,\ OUT,\ CANCELED,\ WAITING)\n\n\ @param\ status\ (Status)\ the\ reservation\ status.\n\ @throw\ IllegalArgumentException\ if\ the\ status\ change\ is\ illegal\ (the\ status\ already\ matches\ the\ change\ requested).\n
comment9.params=r
comment9.target=void\ setRoom(Room)
comment9.text=\n\ Sets\ the\ Reservation's\ room.\ Validates\ that\ the\ room\ in\ question\ is\ available.\ Sets\ the\ room\ availability\ to\ false.\n\ \n\ @param\ r\ (Room)\ the\ room\ to\ be\ placed\ on\ the\ Reservation.\n\ @throw\ IllegalArgumentException\ if\ the\ room\ is\ not\ available.\n
numComments=14
