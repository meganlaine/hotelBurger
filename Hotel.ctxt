#BlueJ class context
comment0.target=Hotel
comment0.text=\r\n\ Class\ Hotel\ represents\ a\ hotel.\ It\ has\ (ArrayLists)\ for\ Rooms\ and\ Reservations.\r\n\ \r\n\ @author\ Dale\ Berg,\ Nick\ Coyle,\ Megan\ Laine,\ Steven\ Liu\r\n\ @version\ 1/22/2019\r\n
comment1.params=fileName
comment1.target=Hotel(java.lang.String)
comment1.text=\r\n\ Hotel\ Constructor\ 1/1\ (Constructor\ used\ from\ Main\ client\ code.)\r\n\ Reads\ data\ from\ the\ hotel\ text\ file,\ and\ populates\ the\ ArrayList<Room>\r\n
comment10.params=
comment10.target=java.util.ArrayList\ getReservedRoomsList()
comment10.text=\r\n\ Returns\ an\ arraylist\ of\ Room\ objects\ that\ are\ unavailable.\r\n\ A\ reserved\ room\ is\ considered\ unavailable.\ \r\n\ A\ room\ with\ a\ checked\ in\ guest\ is\ considered\ unavailable.\r\n\r\n\ @return\ rms\ (ArrayList<Room>)\ ArrayList\ of\ unavailable\ rooms\ in\ the\ hotel.\r\n
comment11.params=
comment11.target=int\ getReservedRooms()
comment11.text=\r\n\ Returns\ the\ number\ of\ unavailable\ rooms\ in\ the\ hotel.\ \r\n\ A\ reserved\ room\ is\ considered\ unavailable.\ \r\n\ A\ room\ with\ a\ checked\ in\ guest\ is\ considered\ unavailable.\r\n\r\n\ @return\ accum\ (int)\ representing\ number\ of\ unavailable\ rooms\ in\ the\ hotel.\r\n
comment12.params=
comment12.target=java.util.ArrayList\ getAllRooms()
comment12.text=\r\n\ Returns\ the\ ArrayList<Room>\ that\ 'contains'\ all\ Room\ objects\ in\ this\ hotel.\r\n\r\n\ @return\ rooms\ (ArrayList<Room>)\ representing\ all\ Room\ objects\ in\ the\ hotel.\r\n
comment13.params=
comment13.target=int\ getAllRoomsCount()
comment13.text=\r\n\ Returns\ the\ ArrayList<Room>\ that\ 'contains'\ all\ Room\ objects\ in\ this\ hotel.\r\n\r\n\ @return\ rooms\ (ArrayList<Room>)\ representing\ all\ Room\ objects\ in\ the\ hotel.\r\n
comment14.params=roomNumber
comment14.target=Room\ getRoom(java.lang.String)
comment14.text=\r\n\ Returns\ a\ room\ object\ when\ the\ room\ number\ matches\ the\ argument.\r\n\ \r\n\ @param\ roomNumber\ (String)\ the\ room\ number\ being\ searched\r\n\ @return\ rm\ or\ null\ (Room)\ the\ room\ object\ that\ matches\ the\ search.\ or\ null,\ if\ no\ match.\r\n
comment15.params=guestLastName
comment15.target=java.util.ArrayList\ getReservationsByLastName(java.lang.String)
comment15.text=\r\n\ Returns\ an\ arraylist\ of\ all\ reservations\ matching\ a\ guest's\ last\ name\ from\ \r\n\ hotel's\ list\ of\ reservations.\r\n\ \r\n\ @param\ guestLastName\ (String)\ the\ last\ name\ to\ search\ by\r\n\ @return\ reservationsByName\ (ArrayList<Reservation>)\ list\ of\ reservations\ whose\ last\ name\ matches\ the\ search\ criteria.\r\n
comment16.params=reservationID
comment16.target=Reservation\ getReservation(int)
comment16.text=\r\n\ Returns\ a\ Reservation\ object\ when\ the\ reservationIDs\ match.\ Returns\ null\ if\ no\ match.\r\n\ \r\n\ @param\ reservationID\ (int)\ the\ reservation\ ID\ to\ search\ for.\r\n\ @return\ res\ or\ null\ (Reservation)\ the\ reservation\ object\ whose\ ID\ matches\ the\ search.\r\n
comment17.params=
comment17.target=int\ getNumReservations()
comment17.text=\r\n\ Returns\ the\ number\ of\ all\ reservations\ that\ the\ Hotel\ has\ (includes\ all\ statuses).\r\n\r\n\ @return\ (int)\ the\ number\ of\ all\ hotel\ reservations\ (all\ statuses)\r\n
comment18.params=
comment18.target=java.util.ArrayList\ getActiveReservations()
comment18.text=\r\n\ Returns\ an\ ArrayList\ of\ Reservation\ objects\ from\ the\ hotel\ if\ Reservation\ status\ is\ \r\n\ 'active'.\ 'Active'\ reservation\ \=\ hotel\ is\ waiting\ for\ guest,\ OR\ guest\ is\ checked\ in.\r\n\ \r\n\ @return\ ArrayList<Reservation>\ of\ all\ active\ reservations.\r\n
comment19.params=
comment19.target=java.util.ArrayList\ getInactiveReservations()
comment19.text=\r\n\ Returns\ an\ ArrayList\ of\ Reservation\ objects\ from\ the\ hotel\ if\ Reservation\ status\ is\ \r\n\ 'inactive'.\ 'Inactive'\ reservation\ \=\ guest\ checked\ out,\ OR\ reservation\ canceled.\r\n\ \r\n\ @return\ ArrayList<Reservation>\ of\ all\ inactive\ reservations.\r\n
comment2.params=
comment2.target=void\ fillRoomArrayList()
comment2.text=\r\n\ Reads\ data\ from\ a\ .txt\ file\ and\ stores\ it\ in\ this\ Room-object\ ArrayList.\r\n\ Assumes\ that\ the\ text\ file\ is\ in\ a\ correct\ template.\ (Assume\ no\ mistakes\ in\ .txt\ file)\r\n\r\n\ @param\ fileName\ (String)\ representing\ a\ .txt\ file.\r\n\ @throws\ FileNotFoundException\ if\ the\ file\ doesn't\ exist\ or\ cannot\ be\ read.\r\n\ @throws\ IllegalArgumentException\ if\ the\ file\ doesn't\ match\ expected\ format.\r\n
comment20.params=
comment20.target=java.util.ArrayList\ getCheckedInReservations()
comment20.text=\r\n\ Returns\ an\ ArrayList\ of\ Reservation\ objects\ from\ the\ hotel\ if\ Reservation\ status\ is\ \r\n\ guest\ checked\ out,\ \r\n\ \r\n\ @return\ ArrayList<Reservation>\ of\ all\ checkedout\ reservations.\r\n
comment21.params=
comment21.target=java.util.ArrayList\ getCheckedoutReservations()
comment21.text=\r\n\ Returns\ an\ ArrayList\ of\ Reservation\ objects\ from\ the\ hotel\ if\ Reservation\ status\ is\ \r\n\ guest\ checked\ out,\ \r\n\ \r\n\ @return\ ArrayList<Reservation>\ of\ all\ checkedout\ reservations.\r\n
comment22.params=
comment22.target=java.util.ArrayList\ getCanceledReservations()
comment22.text=\r\n\ Returns\ an\ ArrayList\ of\ Reservation\ objects\ from\ the\ hotel\ if\ Reservation\ status\ is\ \r\n\ guest\ canceled,\ \r\n\ \r\n\ @return\ ArrayList<Reservation>\ of\ all\ canceled\ reservations.\r\n
comment23.params=
comment23.target=java.util.ArrayList\ getAllInvoicesPaid()
comment23.text=\r\n\ Returns\ an\ ArrayList\ of\ strings\ representing\ 'invoices'\ in\ the\ hotel\ \r\n\ where\ there\ is\ NO\ balance\ due.\r\n\ \r\n\ @return\ ArrayList<String>\ of\ all\ 'invoices'\ that\ have\ been\ paid.\r\n
comment24.params=
comment24.target=java.util.ArrayList\ getAllInvoicesUnpaid()
comment24.text=\r\n\ Returns\ an\ ArrayList\ of\ strings\ representing\ 'invoices'\ in\ the\ hotel\ \r\n\ where\ there\ is\ a\ balance\ due.\r\n\ \r\n\ @return\ ArrayList<String>\ of\ all\ 'invoices'\ with\ outstanding\ balance.\r\n
comment25.params=guest
comment25.target=Reservation\ findReservation(Guest)
comment26.params=status
comment26.target=java.util.ArrayList\ getReservations(Status)
comment27.params=
comment27.target=java.util.ArrayList\ getOccupiedRoomNum()
comment28.params=
comment28.target=java.util.ArrayList\ getEmptyRoomNum()
comment28.text=\r\n\ \ methods\ used\ in\ GUI\r\n
comment29.params=name
comment29.target=void\ setName(java.lang.String)
comment29.text=\r\n\ Method\ setName\ sets\ this\ hotel's\ name\ field.\r\n\r\n\ @param\ name\ (String)\ hotel\ name\r\n
comment3.params=room
comment3.target=void\ addRoom(Room)
comment30.params=address
comment30.target=void\ setAddress(java.lang.String)
comment30.text=\r\n\ Method\ setAddress\ sets\ this\ hotel's\ address\ field.\r\n\r\n\ @param\ address\ (String)\ hotel\ address\r\n
comment31.params=phoneNumber
comment31.target=void\ setPhoneNumber(java.lang.String)
comment31.text=\r\n\ Method\ setPhoneNumber\ sets\ the\ hotel's\ phone\ number\r\n\r\n\ @param\ phoneNumber\ (String)\ hotel\ phone\ number\r\n
comment32.params=r
comment32.target=void\ addReservation(Reservation)
comment32.text=\r\n\ Adds\ a\ new\ Reservation\ object\ to\ the\ Hotel's\ arrayList\ of\ reservation\ objects\r\n\ \r\n\ @param\ r\ (Reservation)\ reservation\ object\r\n
comment33.params=
comment33.target=void\ sortReservations()
comment33.text=OTHER\ METHODS
comment34.params=
comment34.target=java.lang.String\ toString()
comment34.text=\r\n\ Method\ toString\ overrides\ Object\ class's\ toString\ method;\ returns\ info\ about\ the\ hotel.\r\n\r\n\ @return\ (String)\ with\ info\ about\ name,\ address,\ and\ phone\ number.\r\n
comment35.params=
comment35.target=void\ test()
comment35.text=\r\n\ A\ method\ to\ test\ basic\ functionality\ of\ this\ class\r\n
comment36.params=roomNum
comment36.target=Reservation\ findReservation(java.lang.String)
comment4.params=fileName
comment4.target=void\ fillReservationArrayList(java.lang.String)
comment4.text=\r\n\ Reads\ data\ from\ a\ .txt\ file\ and\ stores\ it\ in\ this\ Room-object\ ArrayList.\r\n\ Assumes\ that\ the\ text\ file\ is\ in\ a\ correct\ template.\ (Assume\ no\ mistakes\ in\ .txt\ file)\r\n\r\n\ @param\ fileName\ (String)\ representing\ a\ .txt\ file.\r\n\ @throws\ FileNotFoundException\ if\ the\ file\ doesn't\ exist\ or\ cannot\ be\ read.\r\n\ @throws\ IllegalArgumentException\ if\ the\ file\ doesn't\ match\ expected\ format.\r\n
comment5.params=
comment5.target=void\ save()
comment5.text=\r\n\ This\ method\ "saves"\ persists\ the\ hotel\ data\ back\ to\ the\ text\ files\ from\ where\ the\ \r\n\ construction\ data\ were\ first\ read.\r\n\ \r\n\ ArrayList\ of\ reservations\ needs\ to\ be\ sorted\ with\ canceled\ ones\ first\ before\ we\ save.\r\n\ This\ is\ because\ when\ the\ program\ starts\ and\ reservations\ \r\n\ are\ read\ in\ from\ the\ txt\ file,\ if\ a\ room\ is\ reserved\ with\ status\ other\ than\ canceled,\ \r\n\ then\ the\ room\ will\ be\ flagged\ unavailable,\ but\ if\ the\ same\ room\ has\ a\ canceled\ reservation\r\n\ later\ in\ the\ text\ file,\ it\ will\ think\ the\ room\ is\ unavailable\ (which\ is\ true)\r\n\ and\ will\ crash\ trying\ to\ create\ the\ reservation\ on\ a\ room\ that\ is\ not\ available.\r\n
comment6.params=
comment6.target=java.lang.String\ getName()
comment6.text=\r\n\ Returns\ the\ hotel's\ name\r\n\r\n\ @return\ name\ (String)\ the\ hotel's\ name\r\n
comment7.params=
comment7.target=java.lang.String\ getAddress()
comment7.text=\r\n\ Returns\ the\ hotel's\ address\ as\ a\ string.\r\n\r\n\ @return\ address\ (String)\ the\ hotel's\ address\r\n
comment8.params=
comment8.target=java.lang.String\ getPhoneNumber()
comment8.text=\r\n\ Returns\ the\ hotel's\ phone\ number\ as\ a\ string.\r\n\r\n\ @return\ phoneNumber\ (String)\ the\ hotel's\ phone\ number\r\n
comment9.params=
comment9.target=java.util.ArrayList\ getEmptyRooms()
comment9.text=\r\n\ Returns\ an\ arraylist\ of\ Room\ objects\ that\ are\ available.\r\n\ A\ room\ is\ considered\ available\ IF\ there\ is\ no\ reservation\ on\ it,\ and\ IF\ there\ are\ no\r\n\ guests\ checked\ into\ the\ room.\r\n\r\n\ @return\ rms\ (ArrayList<Room>)\ ArrayList\ of\ available\ rooms\ in\ the\ hotel.\r\n
numComments=37
