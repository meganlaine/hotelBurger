#BlueJ class context
comment0.target=Hotel
comment0.text=\r\n\ Class\ to\ represent\ a\ Hotel.\ Has\ storage\ containers\ for\ all\ the\ Rooms\ and\ all\ the\ Reservations.\r\n\ \r\n\ @field\ name\:String\ the\ name\ of\ the\ Hotel\r\n\ @field\ address\:String\ the\ address\ of\ the\ Hotel\r\n\ @field\ phoneNumber\:String\ the\ phonenumber\ you\ can\ use\ to\ call\ the\ Hotel\r\n\ @field\ rooms\:ArrayList<Room>\ the\ container\ for\ all\ Rooms\ in\ the\ Hotel\r\n\ @field\ reservations\:ArrayList<Reservation>\ the\ container\ for\ all\ the\ reservations\ in\ the\ Hotel\r\n\ \r\n\ @author\ Dale\ Berg,\ Nick\ Coyle,\ Megan\ Laine,\ Steven\ Liu\r\n\ @version\ 1/17/2019\r\n
comment1.params=name\ address\ phoneNumber
comment1.target=Hotel(java.lang.String,\ java.lang.String,\ java.lang.String)
comment1.text=\r\n\ This\ is\ the\ constructor\ that\ all\ other\ constructors\ will\ use.\r\n
comment10.params=
comment10.target=java.lang.String\ getName()
comment11.params=
comment11.target=java.lang.String\ getAddress()
comment12.params=
comment12.target=java.lang.String\ getPhoneNumber()
comment13.params=room
comment13.target=void\ addRoom(Room)
comment14.params=
comment14.target=java.util.ArrayList\ getEmptyRooms()
comment15.params=
comment15.target=java.util.ArrayList\ getOccupiedRoomsList()
comment16.params=
comment16.target=int\ getOccupiedRooms()
comment17.params=
comment17.target=java.util.ArrayList\ getAllRooms()
comment18.params=roomNumber
comment18.target=Room\ getRoom(java.lang.String)
comment18.text=\r\n\ This\ enables\ us\ to\ search\ through\ all\ rooms\ in\ the\ hotel\ and\ returns\ the\ room\ object\r\n\ which\ corresponds\ to\ the\ room\ number\ argument.\r\n
comment19.params=r
comment19.target=void\ addReservation(Reservation)
comment19.text=\r\n\ Method\ to\ add\ a\ new\ reservation\ to\ the\ hotel's\ list\ of\ reservations.\r\n
comment2.params=
comment2.target=Hotel()
comment2.text=\r\n\ This\ is\ the\ default\ constructor\ if\ you\ pass\ no\ parameters,\ it\ just\ calls\ the\ other\ constructor\ will\ some\ default\ testing\ values.\r\n
comment20.params=guestLastName
comment20.target=java.util.ArrayList\ getReservationsByLastName(java.lang.String)
comment20.text=\r\n\ Method\ to\ find\ all\ reservations\ matching\ a\ guest\ last\ name\ from\ hotel's\ list\ of\ reservations.\r\n
comment21.params=reservationID
comment21.target=Reservation\ getReservation(int)
comment21.text=\r\n\ Method\ to\ find\ a\ reservation\ by\ reservationID\ number\ from\ hotel's\ list\ of\ reservations.\r\n
comment22.params=
comment22.target=int\ getNumReservations()
comment23.params=
comment23.target=java.util.ArrayList\ getActiveReservations()
comment24.params=
comment24.target=java.util.ArrayList\ getInactiveReservations()
comment25.params=
comment25.target=java.util.ArrayList\ getAllInvoicesPaid()
comment25.text=\r\n\ Method\ to\ get\ all\ invoices\ for\ the\ whole\ hotel\r\n
comment26.params=
comment26.target=java.util.ArrayList\ getAllInvoicesUnpaid()
comment26.text=\r\n\ Method\ to\ get\ all\ invoices\ for\ the\ whole\ hotel\r\n
comment27.params=
comment27.target=java.lang.String\ toString()
comment3.params=fileName
comment3.target=Hotel(java.lang.String)
comment3.text=\r\n\ Constructor\ used\ from\ Main\ client\ code.\ do\ not\ delete.\r\n\ Reads\ data\ from\ the\ hotel\ text\ file,\ and\ populate\ the\ ArrayList<Room>\r\n
comment4.params=
comment4.target=void\ fillRoomArrayList()
comment4.text=\r\n\ Reads\ data\ from\ a\ .txt\ file\ and\ stores\ it\ in\ this\ Room-object\ ArrayList.\r\n\ Assumes\ that\ the\ text\ file\ is\ in\ a\ correct\ template.\ (Assume\ no\ mistakes\ in\ .txt\ file)\r\n\r\n\ @param\ fileName\ (String)\ representing\ a\ .txt\ file.\r\n\ @throws\ FileNotFoundException\ if\ the\ file\ doesn't\ exist\ or\ cannot\ be\ read.\r\n\ @throws\ IllegalArgumentException\ if\ the\ file\ doesn't\ match\ expected\ format.\r\n
comment5.params=fileName
comment5.target=void\ fillReservationArrayList(java.lang.String)
comment5.text=\r\n\ Reads\ data\ from\ a\ .txt\ file\ and\ stores\ it\ in\ this\ Room-object\ ArrayList.\r\n\ Assumes\ that\ the\ text\ file\ is\ in\ a\ correct\ template.\ (Assume\ no\ mistakes\ in\ .txt\ file)\r\n\r\n\ @param\ fileName\ (String)\ representing\ a\ .txt\ file.\r\n\ @throws\ FileNotFoundException\ if\ the\ file\ doesn't\ exist\ or\ cannot\ be\ read.\r\n\ @throws\ IllegalArgumentException\ if\ the\ file\ doesn't\ match\ expected\ format.\r\n
comment6.params=
comment6.target=void\ save()
comment6.text=\r\n\ This\ method\ "saves"\ persists\ the\ hotel\ data\ back\ to\ the\ text\ files\ the\ data\ was\ first\ read\ from.\r\n\ \r\n\ ArrayList\ of\ reservations\ needs\ to\ be\ sorted\ with\ canceled\ ones\ first\ before\ we\ save.\r\n\ This\ is\ because\ when\ the\ program\ starts\ and\ reservations\ \r\n\ are\ read\ in\ from\ the\ txt\ file,\ if\ a\ room\ is\ reserved\ with\ status\ other\ than\ canceled,\ \r\n\ then\ the\ room\ will\ be\ flagged\ unavailable,\ but\ if\ the\ same\ room\ has\ a\ canceled\ reservation\r\n\ later\ in\ the\ text\ file,\ it\ will\ think\ the\ room\ is\ unavailable\ (which\ is\ true)\r\n\ and\ will\ crash\ trying\ to\ create\ the\ reservation\ on\ a\ room\ that\ is\ not\ available.\r\n\ \r\n
comment7.params=name
comment7.target=void\ setName(java.lang.String)
comment8.params=address
comment8.target=void\ setAddress(java.lang.String)
comment9.params=phoneNumber
comment9.target=void\ setPhoneNumber(java.lang.String)
numComments=28
